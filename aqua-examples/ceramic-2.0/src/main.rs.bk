/*
 * Copyright 2021 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

use marine_rs_sdk::{marine, module_manifest, MountedBinaryResult, WasmLoggerBuilder};

module_manifest!();

pub fn main() {
    WasmLoggerBuilder::new().build().unwrap();
}

#[marine]
pub struct Result {
    stdout: String,
    stderr: String,
    // err_code: i64,
}

/*
For some reason, glaze writes to stderr instead of stdout. so we'll have to switch things up.
*/

#[marine]
fn config_get() -> Result {
    let cmd = "config:show";
    let args = vec![cmd.to_owned()];

    let res = glaze(args);

    let stdout = String::from_utf8(res.stderr).unwrap();
    let stderr = String::from_utf8(res.stdout).unwrap();

    Result {
        stdout: stdout,
        stderr: stderr,
    }
}

#[marine]
fn did_create() -> Result {
    // create a new DID
    let cmd = "did:create";
    let args = vec![cmd.to_owned()];

    let res = glaze(args);

    let stdout = String::from_utf8(res.stderr).unwrap();
    let stderr = String::from_utf8(res.stdout).unwrap();

    let s = "- Creating DID...\nâœ” Created DID did:key:z6Mkm1tS3ezscF1pm5MuJJtVLvvL1MjtTxJAJBa5reKGHMWA with seed 61896cd65e4c254405ef1f8f898cb0279e84ecaa714c12843b17499bfe20a084\n";
    let s: Vec<&str> = s.split("DID ").collect();
    let s = s[1].replace("\n", "");
    let s: Vec<&str> = s.split(" with seed ").collect();

    Result {
        stdout: stdout,
        stderr: stderr,
    }
}

#[marine]
fn did_get() {
    // get the contents of a record in a DID DataStore
}

#[marine]
fn did_inspect() {
    // inspect the contents of a DID DataStore
}

#[marine]
fn did_merge() {
    // merge the contents of a record in a DID DataStore
}

#[marine]
fn did_set() {
    // set the contents of a record in a DID DataStore
}

#[marine]
fn did_sign() {
    // create a JSON Web Signature
}

#[marine]
fn did_verify() {
    // verify a JSON Web Signature
}

#[marine]
fn model_import() {
    // import a model into another one
}

#[marine]
fn create_stream(sk: String, payload: String) -> Result {
    let args = vec![
        "tile:create".to_owned(),
        "--key".to_owned(),
        sk,
        "--content".to_owned(),
        payload,
    ];

    let res = glaze(args);
    let stdout = String::from_utf8(res.stderr).unwrap();
    let stderr = String::from_utf8(res.stdout).unwrap();

    Result {
        stdout: stdout,
        stderr: stderr,
    }
}

#[marine]
fn query_stream(stream_id: String) -> Result {
    let args = vec!["tile:show".to_owned()];

    let res = glaze(args);
    let stdout = String::from_utf8(res.stderr).unwrap();
    let stderr = String::from_utf8(res.stdout).unwrap();

    Result {
        stdout: stdout,
        stderr: stderr,
    }
}

#[marine]
fn update_stream(sk: String, stream_id: String, payload: String) -> Result {
    let args = vec![
        "tile:update".to_owned(),
        "--key".to_owned(),
        sk,
        "--content".to_owned(),
        payload,
    ];

    let res = glaze(args);
    let stdout = String::from_utf8(res.stderr).unwrap();
    let stderr = String::from_utf8(res.stdout).unwrap();

    Result {
        stdout: stdout,
        stderr: stderr,
    }
}

#[marine]
fn stream_commits() {
    // list commits contained within a stream
}

#[marine]
fn model_state() {
    // get the state of a Stream
}

#[marine]
fn model_create() {
    // create a local model
}

#[marine]
fn model_delete() {
    // delete a local model
}

#[marine]
fn model_add() {
    // add a stream to a model
}

#[marine]
fn model_deploy() {
    // deploy a model
}

#[marine]
fn model_inspect() {
    // inspect a model
}

#[marine]
fn model_list() {
    // list local models
}

#[marine]
fn model_export() {
    // export a model
}

#[marine]
fn model_import() {
    // import a model into another one
}

#[marine]
#[link(wasm_import_module = "host")]
extern "C" {
    pub fn glaze(cmd: Vec<String>) -> MountedBinaryResult;
}
